(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{512:function(e,n,s){"use strict";s.r(n);var a=s(12),t=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"协议-面向协议编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协议-面向协议编程"}},[e._v("#")]),e._v(" 协议 & 面向协议编程")]),e._v(" "),s("p",[e._v("平日的业务代码编写中，使用协议的场景，除了写 delegate 有使用到，几乎是很少使用协议来优化代码的编写，所以是很不 Swift。在 Swift2.0 中，苹果引入了新的编程范式，就是面向协议编程。近日，在阅读 "),s("code",[e._v("Alamfire")]),e._v("、"),s("code",[e._v("Moya")]),e._v("、"),s("code",[e._v("Reusable")]),e._v(" 等源码，面向协议的编码方式，感受颇深。"),s("code",[e._v("Moya")]),e._v(" 利用协议属性集中管理 API 接口，"),s("code",[e._v("Reusable")]),e._v(" 通过协议扩展，为我们提供了更加又优雅的使用"),s("code",[e._v("reuseIdentifier")]),e._v("。")]),e._v(" "),s("p",[e._v("所以本文，对于"),s("code",[e._v("协议")]),e._v("相关的操作进行了详细的总结")]),e._v(" "),s("ul",[s("li",[e._v("对"),s("code",[e._v("协议")]),e._v("进一步的加深理解")]),e._v(" "),s("li",[e._v("了解"),s("code",[e._v("面向协议")]),e._v("编程范式")]),e._v(" "),s("li",[e._v("总结平日的开发中"),s("code",[e._v("协议")]),e._v("使用的常见场景")]),e._v(" "),s("li",[e._v("使用协议，更有效的组织我们的代码")])]),e._v(" "),s("h2",{attrs:{id:"协议（protocol）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协议（protocol）"}},[e._v("#")]),e._v(" 协议（Protocol）")]),e._v(" "),s("p",[s("code",[e._v("协议")]),e._v(" 定义了一个蓝图，规定了用来实现某一特定任务或者功能的方法、属性，以及其他需要的东西。类、结构体或枚举都可以遵循协议，并为协议定义的这些要求提供具体实现。某个类型能够满足某个协议的要求，就可以说该类型遵循这个协议。")]),e._v(" "),s("p",[e._v("所谓"),s("code",[e._v("协议")]),e._v("，就是一组属性和/或方法的定义，而如果某个具体类型想要遵守一个协议，那它需要实现这个协议所定义的所有这些内容。协议实际上做的事情不过是“关于实现的约定”。")]),e._v(" "),s("p",[e._v("高度的协议化有助于解耦、测试以及扩展，而结合泛型来使用协议，更可以让我们免于动态调用和类型转换的苦恼，保证了代码的安全性。")]),e._v(" "),s("h2",{attrs:{id:"protocol-基础语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protocol-基础语法"}},[e._v("#")]),e._v(" Protocol 基础语法")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public protocol URLConvertible {\n    /// Returns a URL that conforms to RFC 2396 or throws an `Error`.\n    ///\n    /// - throws: An `Error` if the type cannot be converted to a `URL`.\n    ///\n    /// - returns: A URL or throws an `Error`.\n    func asURL() throws -> URL\n}\n\nextension String: URLConvertible {\n    /// Returns a URL if `self` represents a valid URL string that conforms to RFC 2396 or throws an `AFError`.\n    ///\n    /// - throws: An `AFError.invalidURL` if `self` is not a valid URL string.\n    ///\n    /// - returns: A URL or throws an `AFError`.\n    public func asURL() throws -> URL {\n        guard let url = URL(string: self) else { throw AFError.invalidURL(url: self) }\n        return url\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])]),s("ol",[s("li",[e._v("属性要求 ：\n"),s("ul",[s("li",[e._v("{ get set } ：指定读写属性")]),e._v(" "),s("li",[e._v("static／class：指定类型属性")])])]),e._v(" "),s("li",[e._v("方法要求：\n"),s("ul",[s("li",[e._v("static／class：指定类方法")]),e._v(" "),s("li",[e._v("mutating：要求实现可变方法（针对值类型的实例方法，可以在该方法中修改它所属的实例以及实例的任意属性的值）")])])]),e._v(" "),s("li",[e._v("构造器要求：\n"),s("ul",[s("li",[e._v("在遵循协议的类中，必须使用 required 关键字修饰，保证其子类也必须提供该构造器的实现。（除非有 final 修饰的类，可以不用 required，因为不会再有子类）")])])])]),e._v(" "),s("h2",{attrs:{id:"了解-pop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#了解-pop"}},[e._v("#")]),e._v(" 了解 POP")]),e._v(" "),s("blockquote",[s("p",[e._v("面向对象的问题就是，你想要一根香蕉，但你得到的是一只持有香蕉和整个丛林的大猩猩。 --- Joe Armstrong")])]),e._v(" "),s("p",[e._v("在面向对象编程中，子类是在多个类之间共享代码的有效方式。一个子类将从它的父类继承所有的方法，然后选择重写其中的某些方法。")]),e._v(" "),s("p",[e._v("面向对象是一种不错的抽象方式，但是肯定不是最好的方式。它无法描述两个不同事物具有某个相同特性这一点。在这里，特性的组合要比继承更贴切事物的本质。")]),e._v(" "),s("p",[e._v("有一些语言有多继承的特性，其中最常见的是 C++。但是这也导致了钻石问题 (或者叫菱型缺陷) 的麻烦。举例来说，如果可以多继承，那么我们就可以让 NSMutableAttributedString 同时继承 NSMutableString 和 NSAttributedString。但是要是这两个类中都重写了 NSString 中的某个方法的时候，该怎么办？你可以通过选择其中一个方法来解决这个问题。但是要是这个方式是 isEqual: 这样的通用方法又该怎么处理呢？实际上，为多继承的类提供合适的行为真的是一件非常困难的事情。")]),e._v(" "),s("p",[e._v("协议扩展是一种可以在不共享基类的前提下共享代码的方法。协议定义了一组最小可行的方法集合，以供类型进行实现。而类型通过扩展的方式在这些最小方法上实现更多更复杂的特性。")]),e._v(" "),s("p",[e._v("Swift 的协议的另一个强大特性是我们可以使用完整的方法实现来扩展一个协议。你可以扩展你自己的协议，也可以对已有协议进行扩展。")]),e._v(" "),s("h2",{attrs:{id:"常见的使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的使用场景"}},[e._v("#")]),e._v(" 常见的使用场景")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("委托（代理）模式")])])]),e._v(" "),s("p",[s("code",[e._v("委托")]),e._v("是一种设计模式，它允许类或结构体将一些需要它们负责的功能委托给其他类型的实例。"),s("code",[e._v("委托模式")]),e._v("的实现很简单：定义协议来封装那些需要被委托的功能，这样就能确保遵循协议的类型能提供这些功能。"),s("code",[e._v("委托模式")]),e._v("可以用来响应特定的动作，或者接收外部数据源提供的数据，而无需关心外部数据源的类型。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("protocol CustomViewDelegate: class {\n    func selectedItem(_ view:CustomView, index: Int)\n}\n\nclass CustomView: UIView {\n\n    open weak var delegate: CustomViewDelegate?\n    open fileprivate(set) var selectedIndex = 0\n\n    func selectedAction() {\n        delegate?.selectedItem(self, index: selectedIndex)\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/Moya/Moya",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("对 Alamofire 进一步封装的 Moya")]),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("对 API 的各种接口统一起来进行管理，使用 Moya 这个库再好不过啦。首先，我们会对 API 接口建立一个枚举，然后枚举实现下面接口，完成基本的属性配置。如：服务器地址，接口路径，测试数据")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public protocol TargetType {\n\n    /// The target's base `URL`.\n    var baseURL: URL { get }\n\n    /// The path to be appended to `baseURL` to form the full `URL`.\n    var path: String { get }\n\n    /// The HTTP method used in the request.\n    var method: Moya.Method { get }\n\n    /// Provides stub data for use in testing.\n    var sampleData: Data { get }\n\n    /// The type of HTTP task to be performed.\n    var task: Task { get }\n\n    /// The type of validation to perform on the request. Default is `.none`.\n    var validationType: ValidationType { get }\n\n    /// The headers to be used in the request.\n    var headers: [String: String]? { get }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br")])]),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/AliSoftware/Reusable",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("更加优雅的实现 Cell 的 Register 和 Reuse")]),s("OutboundLink")],1)])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public protocol Reusable: class {\n  /// The reuse identifier to use when registering and later dequeuing a reusable cell\n  static var reuseIdentifier: String { get }\n}\n\n/// Make your `UITableViewCell` and `UICollectionViewCell` subclasses\n/// conform to this typealias when they *are* NIB-based\n/// to be able to dequeue them in a type-safe manner\npublic typealias NibReusable = Reusable & NibLoadable\n\n// MARK: - Default implementation\n\npublic extension Reusable {\n  /// By default, use the name of the class as String for its reuseIdentifier\n  static var reuseIdentifier: String {\n    return String(describing: self)\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])]),s("ul",[s("li",[s("strong",[e._v("使用 Storyboard 构建控制器，关于控制器间的依赖注入")])])]),e._v(" "),s("p",[e._v("SegueHandlerType.swift")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('protocol SegueHandlerType {\n    associatedtype SegueIdentifier: RawRepresentable\n}\n\nprotocol Injectable {\n    associatedtype T\n    func inject(_ : T)\n    func assertDependencies()\n}\n\nextension SegueHandlerType where Self: UIViewController,\n    SegueIdentifier.RawValue == String\n{\n\n    func performSegueWithIdentifier(_ segueIdentifier: SegueIdentifier,\n        sender: AnyObject?) {\n\n        performSegue(withIdentifier: segueIdentifier.rawValue, sender: sender)\n    }\n\n    func segueIdentifierForSegue(_ segue: UIStoryboardSegue) -> SegueIdentifier {\n\n        guard let identifier = segue.identifier,\n            let segueIdentifier = SegueIdentifier(rawValue: identifier) else { fatalError("Invalid segue identifier \\(String(describing: segue.identifier)).") }\n\n        return segueIdentifier\n    }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br")])]),s("p",[e._v("ViewController.swift")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('class ViewController: UIViewController, SegueHandlerType {\n\n    enum SegueIdentifier: String {\n        case TheRedPillExperience\n        case TheBluePillExperience\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n\n        switch segueIdentifierForSegue(segue) {\n\n        case .TheRedPillExperience:\n            let redPillVC = segue.destination as? RedPillViewController\n            redPillVC?.inject("😈")\n        case .TheBluePillExperience:\n            let bluePillVC = segue.destination as? BluePillViewController\n            bluePillVC?.inject("👼")\n        }\n    }\n\n    @IBAction func onRedPillButtonTap(_ sender: AnyObject) {\n        performSegueWithIdentifier(.TheRedPillExperience, sender: self)\n    }\n\n    @IBAction func onBluePillButtonTap(_ sender: AnyObject) {\n        performSegueWithIdentifier(.TheBluePillExperience, sender: self)\n    }\n}\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br")])]),s("p",[e._v("RedPillViewController.swift")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class RedPillViewController: UIViewController, Injectable {\n\n    @IBOutlet weak fileprivate var mainLabel: UILabel!\n\n    // this is my original dependency (IOU)\n    // I can now make this private!\n    fileprivate var mainText: String!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // this will crash if the IOU is not set\n        assertDependencies()\n\n\n        mainLabel.text = mainText\n    }\n\n    // Injectable\n    func inject(_ thing : String) {\n        mainText = thing\n    }\n\n    func assertDependencies() {\n        assert(mainText != nil)\n    }\n}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br")])]),s("ul",[s("li",[s("a",{attrs:{href:"http://swift.gg/2016/06/13/stupid-swift-tricks-5-enums/",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("自定义枚举的映射关系")]),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"http://swift.gg/2017/04/13/swift-nsnotificationcenter-protocol/",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("NotificationCenter 协议")]),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"在阅读相关资料是遇到的疑问点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在阅读相关资料是遇到的疑问点"}},[e._v("#")]),e._v(" 在阅读相关资料是遇到的疑问点")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("mutating 关键字")])])]),e._v(" "),s("p",[e._v("Swift 的 protocol 不仅可以被 class 类型实现，也适用于 struct 和 enum。因为这个原因，我们在写给别人用的接口时需要多考虑是否使用 mutating 来修饰方法，比如定义为 mutating func myMethod()。Swift 的 mutating 关键字修饰方法是为了能在该方法中修改 struct 或是 enum 的变量，所以如果你没在接口方法里写 mutating 的话，别人如果用 struct 或者 enum 来实现这个接口的话，就不能在方法里改变自己的变量了。")]),e._v(" "),s("ul",[s("li",[e._v("关联类型")]),e._v(" "),s("li",[e._v("关联类型的协议和普通协议的不同点")]),e._v(" "),s("li",[e._v("协议允许我们进行动态派发（区分静态派发）")])]),e._v(" "),s("p",[s("img",{attrs:{src:"media/15216224458140/1_SIcSsfmBCp4tNzLxGJAbdw.png",alt:"1_SIcSsfmBCp4tNzLxGJAbd"}})]),e._v(" "),s("h2",{attrs:{id:"总结和思考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结和思考"}},[e._v("#")]),e._v(" 总结和思考")]),e._v(" "),s("p",[e._v("通过集中的了解协议的相关特性，已经迫不及待的想去 Review 自己的代码了。"),s("code",[e._v("协议")]),e._v("就是定义一种约束和描述，更加方便的管理类与类之间、对象与对象之间的关系。然后就是"),s("code",[e._v("协议扩展")]),e._v("提供默认实现的这一机制，简直太赞了，是不是可以给 ViewController 进行瘦身，还有就是不太喜欢 BaseController，所有 Controller 都继承，这么样的一个写法。这样的话，可以将 Base 类中的一些行为，用协议扩展的方式来进行提供，插件式功能编写，即用即有。")]),e._v(" "),s("p",[e._v("另外，MVVM 的架构中，也是有蛮多协议的使用场景来支撑。泛型和协议的配合也是非常爆炸。")]),e._v(" "),s("h2",{attrs:{id:"进一步相关阅读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进一步相关阅读"}},[e._v("#")]),e._v(" 进一步相关阅读")]),e._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://onevcat.com/2016/11/pop-cocoa-1/",target:"_blank",rel:"noopener noreferrer"}},[e._v("面向协议编程与 Cocoa 的邂逅 (上)"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://onevcat.com/2016/12/pop-cocoa-2/",target:"_blank",rel:"noopener noreferrer"}},[e._v("面向协议编程与 Cocoa 的邂逅 (下)"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://academy.realm.io/cn/posts/appbuilders-natasha-muraschev-practical-protocol-oriented-programming/",target:"_blank",rel:"noopener noreferrer"}},[e._v("真刀真枪 面向协议编程"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/entry/589439622f301e00693567e5",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swift 面向协议编程入门"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://bestswifter.com/pop/",target:"_blank",rel:"noopener noreferrer"}},[e._v("从 Swift 的面向协议编程说开去 "),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/ochococo/Design-Patterns-In-Swift",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design-Patterns-In-Swift"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/ochococo/OOD-Principles-In-Swift",target:"_blank",rel:"noopener noreferrer"}},[e._v("OOD-Principles-In-Swift"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"http://wiki.c2.com/?DesignPatternsBook",target:"_blank",rel:"noopener noreferrer"}},[e._v("设计模式"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.pluralsight.com/guides/swift/protocol-oriented-programming-in-swift",target:"_blank",rel:"noopener noreferrer"}},[e._v("面向协议的 Swift 编程"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/24451309",target:"_blank",rel:"noopener noreferrer"}},[e._v("面向协议编程，灵丹妙药或是饮鸩止渴"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=t.exports}}]);