(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{490:function(t,a,v){"use strict";v.r(a);var _=v(12),r=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"swift"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#swift"}},[t._v("#")]),t._v(" Swift")]),t._v(" "),v("p",[t._v("编译器对性能进行了优化，编程语言对开发进行了优化，两者互不干扰，鱼与熊掌兼得。")]),t._v(" "),v("h2",{attrs:{id:"概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),v("h3",{attrs:{id:"集合类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集合类型"}},[t._v("#")]),t._v(" 集合类型")]),t._v(" "),v("p",[t._v("Swift 语言提供数组（Array）、集合（Set）和字典（Dictionary）三种基本的集合类型用来存储集合数据。数组是有序数据的集。集合是无序无重复数据的集。字典是无序的键值对的集。")]),t._v(" "),v("p",[t._v("Swift 中的数组、集合和字典必须明确其中保存的键和值类型，这样就可以避免插入一个错误数据类型的值。同理，对于获取到的值你也可以放心，其数据类型是确定的。")]),t._v(" "),v("h4",{attrs:{id:"集合的可变性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集合的可变性"}},[t._v("#")]),t._v(" 集合的可变性")]),t._v(" "),v("p",[t._v("如果创建一个数组、集合或字典并且把它分配成一个变量，这个集合将会是可变的。这意味着可以在创建之后添加、修改或者删除数据项。如果把数组、集合或字典分配成常量，那么它就是不可变的，它的大小和内容都不能被改变。")]),t._v(" "),v("h3",{attrs:{id:"闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),v("p",[t._v("闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift 中的闭包与 C 和 Objective-C 中的代码块（blocks）以及其他一些编程语言中的匿名函数（Lambdas）比较相似。")]),t._v(" "),v("p",[t._v("闭包可以捕获和存储其所在上下文中任意常量和变量的引用。被称为包裹常量和变量。 Swift 会为你管理在捕获过程中涉及到的所有内存操作。")]),t._v(" "),v("h4",{attrs:{id:"尾随闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#尾随闭包"}},[t._v("#")]),t._v(" 尾随闭包")]),t._v(" "),v("p",[t._v("如果你需要将一个很长的闭包表达式作为最后一个参数传递给函数，将这个闭包替换成为尾随闭包的形式很有用。尾随闭包是一个书写在函数圆括号之后的闭包表达式，函数支持将其作为最后一个参数调用。")]),t._v(" "),v("h4",{attrs:{id:"值捕获"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#值捕获"}},[t._v("#")]),t._v(" 值捕获")]),t._v(" "),v("p",[t._v("闭包可以在其被定义的上下文中捕获常量或变量。即使定义这些常量和变量的原作用域已经不存在，闭包仍然可以在闭包函数体内引用和修改这些值。")]),t._v(" "),v("p",[t._v("Swift 中，可以捕获值的闭包的最简单形式是嵌套函数，也就是定义在其他函数的函数体内的函数。嵌套函数可以捕获其外部函数所有的参数以及定义的常量和变量。")]),t._v(" "),v("h4",{attrs:{id:"逃逸闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#逃逸闭包"}},[t._v("#")]),t._v(" 逃逸闭包")]),t._v(" "),v("p",[t._v("当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当你定义接受闭包作为参数的函数时，你可以在参数名之前标注 @escaping，用来指明这个闭包是允许“逃逸”出这个函数的。")]),t._v(" "),v("h4",{attrs:{id:"自动闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自动闭包"}},[t._v("#")]),t._v(" 自动闭包")]),t._v(" "),v("h2",{attrs:{id:"面试题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[t._v("#")]),t._v(" 面试题")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("类(class) 和 结构体(struct) 有什么区别? 类(class) 和 结构体(struct) 比较,优缺点?")])])]),t._v(" "),v("ol",[v("li",[t._v("引用类型和值类型的区别")]),t._v(" "),v("li")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("什么是泛型，swift 哪些地方使用了泛型？")])]),t._v(" "),v("li",[v("p",[t._v("如何解决引用循环")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("定义静态方法时关键字 static 和 class 有什么区别")])])])]),t._v(" "),v("p",[t._v("class 修饰时，子类可以重写父类类方法。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("请说明并比较以下关键词：Open, Public, Internal, File-private, Private")])]),t._v(" "),v("li",[v("p",[t._v("swift 中,关键字 guard 和 defer 的用法 guard 也是基于一个表达式的布尔值去判断一段代码是否该被执行。与 if 语句不同的是，guard 只有在条件不满足的时候才会执行这段代码。")])]),t._v(" "),v("li",[v("p",[t._v("关键字:Strong,Weak,Unowned 区别?")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("如何理解 copy-on-write?")])])])]),t._v(" "),v("p",[t._v("值类型在复制时，新对象和原对象实际上在内存中指向同一块区域，只有当新对象发生改变时（增加或删除一个对象），才会给新对象开辟新内存区域。")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("swift 为什么将 String,Array,Dictionary 设计为值类型?")])]),t._v(" "),v("ul",[v("li",[t._v("值类型的内存位置上是在栈上面，所以，效率会更高一些。")]),t._v(" "),v("li",[t._v("值类型在在代码中传递时，都会将其复制一份，所以也会更安全一些。")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("如何将 Swift 中的协议(protocol)中的部分方法设计为可选(optional)?")])])])]),t._v(" "),v("p",[t._v("扩展协议，给可选的方法加上默认实现。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("比较 Swift 和 OC 中的初始化方法 (init) 有什么不同?")])]),t._v(" "),v("li",[v("p",[t._v("比较 Swift 和 OC 中的 protocol 有什么不同?")])]),t._v(" "),v("li",[v("p",[t._v("swift 和 OC 中的自省 有什么区别?")])]),t._v(" "),v("li",[v("p",[t._v("swift 中的枚举,关联值 和 原始值的区分?")])]),t._v(" "),v("li",[v("p",[t._v("swift 中的闭包结构是什么样子的?什么是尾随闭包?什么是逃逸闭包?什么是自动闭包?")])]),t._v(" "),v("li",[v("p",[t._v("swift 中, 存储属性和计算属性的区别?")])]),t._v(" "),v("li",[v("p",[t._v("swift 中如何使用单例模式?")])]),t._v(" "),v("li",[v("p",[t._v("swift 中的下标是什么?")])]),t._v(" "),v("li",[v("p",[t._v("简要说明 Swift 中的初始化器?")])]),t._v(" "),v("li",[v("p",[t._v("什么可选链?")])])]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("高阶函数使用（map、flatmap、compactMap、filter、reduce）")])]),t._v(" "),v("ul",[v("li",[t._v("map 和 flatMap — 对元素进行变换。")]),t._v(" "),v("li",[t._v("filter — 只包含特定的元素。")]),t._v(" "),v("li",[t._v("allSatisfy — 针对一个条件测试所有元素。")]),t._v(" "),v("li",[t._v("reduce — 将元素聚合成一个值。")]),t._v(" "),v("li",[t._v("forEach — 访问每个元素。")]),t._v(" "),v("li",[t._v("sort(by:), sorted(by:), lexicographicallyPrecedes(_:by:), 和 partition(by:) — 重排元素。")]),t._v(" "),v("li",[t._v("firstIndex(where:),lastIndex(where:),first(where:),last(where:), 和 contains(where:) — 一个元素是否存在？")]),t._v(" "),v("li",[t._v("min(by:) 和 max(by:) — 找到所有元素中的最小或最大值。")]),t._v(" "),v("li",[t._v("elementsEqual(_:by:) 和 starts(with:by:) — 将元素与另一个数组进行比较。")]),t._v(" "),v("li",[t._v("split(whereSeparator:) — 把所有元素分成多个数组。")]),t._v(" "),v("li",[t._v("prefix(while:) — 从头取元素直到条件不成立。")]),t._v(" "),v("li",[t._v("drop(while:) — 当条件为真时，丢弃元素；一旦不为真，返回其余的元素(和 prefix 类似，不过返回相反的集合)。")]),t._v(" "),v("li",[t._v("removeAll(where:) — 删除所有符合条件的元素。")])])])]),t._v(" "),v("h2",{attrs:{id:"see-also"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[t._v("#")]),t._v(" See Also")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://swiftgg.gitbook.io/swift/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Swift Programming Language 中文版"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://www.whatsnewinswift.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("What's new in Swift?"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);